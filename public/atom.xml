<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>walkergriggs.com</title><description>Hi, I'm Walker, and I reboot your servers</description><link>/</link><language>en</language><copyright>Copyright 7341, Walker Griggs</copyright><generator>Hugo - gohugo.io</generator><docs>http://cyber.harvard.edu/rss/rss.html</docs><atom:link href="http://walkergriggs.com/atom.xml" rel="self" type="application/atom+xml"/><item><title>Ergodox Infinity LCD Firmware</title><link>/2017/03/21/ergodox-infinity-lcd-firmware/</link><description>&lt;p>So you&amp;rsquo;ve got yourself an Ergodox Infinity. Congratulations! Everyone probably thinks your a little bit crazy spending that much on a keyboard that strange with LCD displays that small and a layout you&amp;rsquo;re struggling to type on. But it&amp;rsquo;s ok &amp;ndash; anyone who shares this strange obsession probably understands.&lt;/p>
&lt;p>This post is really to demonstrate how to change the default layer&amp;rsquo;s LCD logo. &lt;a href="http://asciipr0n.net/ergodox-infinity-logo/">Asciipr0n&lt;/a> has a very clean guide to this, but I find that parts of it are (if not the majority of it is) out of date. Since the firmware has been updated, I thought I&amp;rsquo;d update the guide.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites &lt;a href="#prerequisites" class="hash">#&lt;/a>&lt;/h2>
&lt;p>I don&amp;rsquo;t want to go too deep into these. Essentially, here is the shopping list of the things you&amp;rsquo;ll need&amp;hellip;&lt;/p>
&lt;h3 id="firmware">Firmware &lt;a href="#firmware" class="hash">#&lt;/a>&lt;/h3>
&lt;p>The firmware, and really the whole reason for this post, well be using is the &lt;a href="https://github.com/kiibohd/controller">kiibohd/controller&lt;/a>. Jacob Alexander (aka Haata) is not only Input Clubs head honcho, but he IS Input Club (well&amp;hellip; sorta). He not only wrote kiibohd, but also wrote kll (the keyboard layout language). You&amp;rsquo;ll want to clone his firmware&amp;hellip;&lt;/p>
&lt;h3 id="dfu-util">dfu-util &lt;a href="#dfu-util" class="hash">#&lt;/a>&lt;/h3>
&lt;p>This toolchain is what we&amp;rsquo;ll be using to flash our firmware onto the board. I downloaded mine from apt-get but it&amp;rsquo;s also available on Homebrew. It&amp;rsquo;s simple enough to download.&lt;/p>
&lt;h3 id="gcc-arm-none-eabi">gcc-arm-none-eabi &lt;a href="#gcc-arm-none-eabi" class="hash">#&lt;/a>&lt;/h3>
&lt;p>This one may only apply to me, but I feel like it shouldn&amp;rsquo;t go unsaid. I needed to download the gcc-arm-none-eabi package to properly build the arm firmware with the gcc compiler. Granted, I&amp;rsquo;m running Debian over here, so you OSX users may not need this step.&lt;/p>
&lt;h3 id="python-imaging-library">Python Imaging Library &lt;a href="#python-imaging-library" class="hash">#&lt;/a>&lt;/h3>
&lt;p>This is only necessary if you plan to use kiibohd&amp;rsquo;s bitmap2Struct.py conversion file. Custom logos can only be flashed in the form of byte array, so this script it highly recommended&amp;hellip; unless you want to write your byte array by hand. Download &amp;lsquo;Image&amp;rsquo; with pip&amp;hellip;&lt;/p>
&lt;h2 id="customize-layout">Customize Layout &lt;a href="#customize-layout" class="hash">#&lt;/a>&lt;/h2>
&lt;p>So now that we have everything we need to continue, customize your layout. I just use &lt;a href="https://configurator.input.club/">Input Club&amp;rsquo;s Configurator&lt;/a>. It&amp;rsquo;s quite simple and doesn&amp;rsquo;t require too much explanation. Just select the button you want to change, and choose its new function. Go as deep into the layering as you wish. My one recommendation: keep a FLASH button on each half in layer seven. This way, you wont have to flip over your board and hit the reset button with paperclip.&lt;/p>
&lt;p>Once you have everything mapped out, download the firmware from the configurator and set aside the ZIP file for later.&lt;/p>
&lt;p>If you have aversion to this configurator, so be it. You can use whatever program &amp;ndash;or lack thereof if you hate yourself &amp;ndash; you want, as long as the .kll files compile in the end&lt;/p>
&lt;h2 id="create-a-logo">Create a Logo &lt;a href="#create-a-logo" class="hash">#&lt;/a>&lt;/h2>
&lt;p>This part is fun and quite straight forward. Create a logo that fits inside 128x32 screen. Anything large won&amp;rsquo;t get flashed. You can create a the logo in any way, as long as you can get it to .bmp file. Originally, I used &lt;a href="http://www.piskelapp.com/">Piskel&lt;/a> to create mine.&lt;/p>
&lt;figure>&lt;img src="/ergodox-infinity-lcd-firmware/game_of_life.png" width="50%"/>
&lt;/figure>
&lt;p>I created the permutation of a glider from Conway&amp;rsquo;s Game of Life. If you don&amp;rsquo;t know exactly what that is, I highly recommend looking into it.&lt;/p>
&lt;p>Essentially, the bitmap can be whatever so long as it&amp;rsquo;s a black foreground on white background. (Though&amp;hellip; I&amp;rsquo;ve just begun to tinker with and observe the conversion of color bitmaps to the monochromatic lcd display&amp;hellip; So you can always give that a try).&lt;/p>
&lt;p>Now in order to flash this new logo onto your board, it needs to be in the form of a byte array. The easiest way to convert your bitmap into the byte array is to use the firmware&amp;rsquo;s &lt;a href="https://github.com/kiibohd/controller/blob/master/Scan/STLcd/bitmap2Struct.py">bitmap2Struct.py&lt;/a> &amp;ndash; as I mentioned earlier. This script spits out two visual representations of the bitmap and the byte array. Just shove the output into a file for later.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">python bitmap2Struct.py --filename &amp;lt;filename&amp;gt; &amp;gt; ByteArray.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is what my ByteArray.txt file look like:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-nil" data-lang="nil">uint8_t array[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00,
}
&lt;/code>&lt;/pre>&lt;h2 id="prepare-the-firmware">Prepare the Firmware &lt;a href="#prepare-the-firmware" class="hash">#&lt;/a>&lt;/h2>
&lt;p>Now that we have all of our files ready to go, it&amp;rsquo;s time to prep the firmware. A few things have changed in the structure of the firmware, so it does take a few steps to get setup. Oddly enough, we need to build the default ergodox firmware in order to rebuild ours later.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#a2f">cd&lt;/span> controller/Keyboards
./ergodox.bash
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you may notice in the firmware&amp;rsquo;s root directory, a &amp;lsquo;kll&amp;rsquo; directory has been created. That is where we need to add our custom layouts. So make yourself a layout directory and copy in all our .kll files from the ZIP the configurator created.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir controller/kll/layouts/&amp;lt;my_layout&amp;gt;
cp &amp;lt;configurator ZIP&amp;gt;/*.kll controller/kll/layouts/&amp;lt;my_layout&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since we have our logo&amp;rsquo;s byte array all squared away, all we have to do is include it. Head into the Scan directory and copy the infinity_ergodox module.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#a2f">cd&lt;/span> controller/Scan
cp -r Infinity_Ergodox Infinity_Ergodox_Custom
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the one and only thing we need to alter in here is the STLcdDefaultImage in scancode_map.kll. Replace the default Input Club&amp;rsquo;s byte array with our custom byte array from earlier.&lt;/p>
&lt;p>Bingo. Now our layouts are almost ready to be flashed. We now need to quickly modify our own build script.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#a2f">cd&lt;/span> controller/Keyboards &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> cp ergodox.bash ergodox-custom.bash
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Edit this new bash file and update the DefaultMap and PartialMaps to include each layer&amp;rsquo;s .kll map created in the configurator. You can also alter the BuildPath, but I&amp;rsquo;m not building more than one set of firmware at a time, so I leave them as the default ICED-L and ICED-R. Do note: each map (default or partial) requires the lcdFuncMap. Here is mine for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#080;font-style:italic"># This is the default layer of the keyboard&lt;/span>
&lt;span style="color:#080;font-style:italic"># NOTE: To combine kll files into a single layout, separate them by spaces&lt;/span>
&lt;span style="color:#080;font-style:italic"># e.g. DefaultMap=&amp;#34;mylayout mylayoutmod&amp;#34;&lt;/span>
&lt;span style="color:#b8860b">DefaultMap&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#34;&amp;lt;my_layout&amp;gt;/MDErgo1-Default-0 lcdFuncMap&amp;#34;&lt;/span>
&lt;span style="color:#080;font-style:italic"># This is where you set the additional layers&lt;/span>
&lt;span style="color:#080;font-style:italic"># NOTE: Indexing starts at 1&lt;/span>
&lt;span style="color:#080;font-style:italic"># NOTE: Each new layer is another array entry&lt;/span>
PartialMaps&lt;span style="color:#666">[&lt;/span>1&lt;span style="color:#666">]=&lt;/span>&lt;span style="color:#b44">&amp;#34;&amp;lt;my_layout&amp;gt;/MDErgo1-Default-1 lcdFuncMap&amp;#34;&lt;/span>
PartialMaps&lt;span style="color:#666">[&lt;/span>2&lt;span style="color:#666">]=&lt;/span>&lt;span style="color:#b44">&amp;#34;&amp;lt;my_layout&amp;gt;/MDErgo1-Default-2 lcdFuncMap&amp;#34;&lt;/span>
PartialMaps&lt;span style="color:#666">[&lt;/span>3&lt;span style="color:#666">]=&lt;/span>&lt;span style="color:#b44">&amp;#34;lcdFuncMap&amp;#34;&lt;/span>
PartialMaps&lt;span style="color:#666">[&lt;/span>4&lt;span style="color:#666">]=&lt;/span>&lt;span style="color:#b44">&amp;#34;lcdFuncMap&amp;#34;&lt;/span>
PartialMaps&lt;span style="color:#666">[&lt;/span>5&lt;span style="color:#666">]=&lt;/span>&lt;span style="color:#b44">&amp;#34;lcdFuncMap&amp;#34;&lt;/span>
PartialMaps&lt;span style="color:#666">[&lt;/span>6&lt;span style="color:#666">]=&lt;/span>&lt;span style="color:#b44">&amp;#34;lcdFuncMap&amp;#34;&lt;/span>
PartialMaps&lt;span style="color:#666">[&lt;/span>7&lt;span style="color:#666">]=&lt;/span>&lt;span style="color:#b44">&amp;#34;&amp;lt;my_layout&amp;gt;/MDErgo1-Default-7 lcdFuncMap&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, change the ScanModule from Infinity_Ergodox to Infinity_Ergodox_Custom or whatever you called your Scan Module. Now we should be all ready to flash.&lt;/p>
&lt;h2 id="build-and-flash">Build and Flash &lt;a href="#build-and-flash" class="hash">#&lt;/a>&lt;/h2>
&lt;p>Now that we have everything set and ready to go, we can actually get this firmware onto your board and have you on your way. First step, rebuild the default firmware from earlier, but run your custom build script this time.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#a2f">cd&lt;/span> controller/Keyboards
./ergodox-custom.bash
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This should build your new firmware and create two directories: ICED-L.gcc and ICED-R.gcc. Those contain the binary files to flash.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#080;font-style:italic"># Connect only your left board and enter flash mode&lt;/span>
sudo dfu-util --download ICED-L.gcc/kiibohd.dfu.bin
&lt;span style="color:#080;font-style:italic"># Connect only your right board and enter flash mode&lt;/span>
sudo dfu-util --download ICED-R.gcc/kiibohd.dfu.bin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this point, your Ergodox Infinity should be both flash with your layout and your custom logo. Happy hacking!&lt;/p></description><author>walker@walkergriggs.com (Walker Griggs)</author><guid>/2017/03/21/ergodox-infinity-lcd-firmware/</guid><pubDate>Wed, 21 Oct 2017 08:00:00 ES</pubDate></item><item><title>A Year with Emacs</title><link>/2017/01/14/a-year-with-emacs/</link><description>&lt;p>&lt;span class="underline">It is important to preface that everything in this article is opinion and based off (roughly) a year of heavy Emacs usage. It is also important to know that this article will be updated along side my configuration and tastes. So without further ado&amp;hellip;&lt;/span>&lt;/p>
&lt;p>We all know Emacs is an immensely powerful beast. We also know how easy it is to venture down a rabbit hole of elisp and never surface. I liken it to a carpenter replacing a door. After removing the old door, he notices the hinges are askew. He removes the hinges only to notice rot in the door frame. By the time he replaces the frame, he notices a slight difference in shade between the new frame and old moldings&amp;hellip; The learning curve for Emacs is wonderfully circular. That being said, I would like to take a moment and explain my configuration in moderate detail.&lt;/p>
&lt;p>Before I get too technical, I should probably explain my fascination and reservation with Emacs. Brief background: I was forced into using Emacs when the only other editor on the lab machines was Gedit (and Vi, but we&amp;rsquo;ll forget about that for now). In all honestly, it was quite a hassle. I began compiling a minimal init.el out of necessity. Linum, flyspell, you name it. It was certainly a gradual transition from cushy Atom, but, after a long while, it became an addiction. It wasn&amp;rsquo;t until I discovered a keyboard designed with Emacs in mind (Atreus) did I see Emacs (and the devoted community) in all of its glory.&lt;/p>
&lt;p>As for my reservations&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>The learning curve is far too steep. My time is best spent elsewhere.&lt;/p>
&lt;/blockquote>
&lt;p>WRONG. The weeks of struggling with Meta keys and Emacs pinkie pays off. Trust me. My workflow has increased substantially, and I feel extraordinarily comfortable in my configuration. Granted, emacs is truly a lifestyle. Embrace it.&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s a bloated editor packed with legacy functionality. The startup time is just too long!&lt;/p>
&lt;/blockquote>
&lt;p>MYTH. You think Emacs is too heavy for you system? Try running Eclipse and Chrome simultaneously and then get back to me. As long as your config file is optimized (cough cough &amp;lsquo;use-package&amp;rsquo;), the startup time won&amp;rsquo;t be longer than a couple of seconds. Granted, on a system with limited resources, Vi may be a better option. Which brings me to my biggest qualm. Vi is an editor. Emacs is an editor AND IDE. When remoting into a server, I&amp;rsquo;m not about to Xforward a fully functional Emacs when bandwidth and memory are scarce. For that reason, I keep a modest .vimrc on hand for some quick cli editing.&lt;/p>
&lt;h2 id="configuration">Configuration &lt;a href="#configuration" class="hash">#&lt;/a>&lt;/h2>
&lt;h3 id="melpa-and-use-package">melpa and use-package &lt;a href="#melpa-and-use-package" class="hash">#&lt;/a>&lt;/h3>
&lt;p>Melpa is a very common package manager for Emacs. I try not to rely on it, though it certainly comes in handy. The simple (and recommended) solution&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lisp" data-lang="lisp">&lt;span style="color:#080;font-style:italic">;; Melpa&lt;/span>
(&lt;span style="color:#00a000">require&lt;/span> &lt;span style="color:#b8860b">&amp;#39;package&lt;/span>)
(&lt;span style="color:#a2f;font-weight:bold">setq&lt;/span> &lt;span style="color:#b8860b">package-enable-at-startup&lt;/span> &lt;span style="color:#800">nil&lt;/span>)
(&lt;span style="color:#b8860b">add-to-list&lt;/span> &lt;span style="color:#b8860b">&amp;#39;package-archives&lt;/span>
&lt;span style="color:#666">&amp;#39;&lt;/span>(&lt;span style="color:#b44">&amp;#34;melpa&amp;#34;&lt;/span> &lt;span style="color:#666">.&lt;/span> &lt;span style="color:#b44">&amp;#34;https://melpa.org/packages/&amp;#34;&lt;/span>))
(&lt;span style="color:#b8860b">add-to-list&lt;/span> &lt;span style="color:#b8860b">&amp;#39;package-archives&lt;/span>
&lt;span style="color:#666">&amp;#39;&lt;/span>(&lt;span style="color:#b44">&amp;#34;melpa-stable&amp;#34;&lt;/span> &lt;span style="color:#666">.&lt;/span> &lt;span style="color:#b44">&amp;#34;http://stable.melpa.org/packages/&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now it wasn&amp;rsquo;t until a friend picked through my config when I learned about &amp;lsquo;use-package&amp;rsquo;. UP is a wonderful macro written by John Wiegley that declares and isolates packages in your config. Each package can then be initialized, configured, and bound independently. This is a must use&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lisp" data-lang="lisp">&lt;span style="color:#080;font-style:italic">;; Bootstrap &amp;#39;use-package&amp;#39;&lt;/span>
(&lt;span style="color:#a2f">unless&lt;/span> (&lt;span style="color:#b8860b">package-installed-p&lt;/span> &lt;span style="color:#b8860b">&amp;#39;use-package&lt;/span>)
(&lt;span style="color:#b8860b">package-refresh-contents&lt;/span>)
(&lt;span style="color:#b8860b">package-install&lt;/span> &lt;span style="color:#b8860b">&amp;#39;use-package&lt;/span>))
(&lt;span style="color:#a2f;font-weight:bold">setq&lt;/span> &lt;span style="color:#b8860b">use-package-verbose&lt;/span> &lt;span style="color:#800">t&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="tabs-whitespace">tabs / whitespace &lt;a href="#tabs-whitespace" class="hash">#&lt;/a>&lt;/h3>
&lt;p>The next few go hand in hand: tabs and whitespace. I&amp;rsquo;d like to reiterate, these are simply opinions. Feel free to disagree, but I cannot stand tabs in my code. Tab size varies across environments but a space will ALWAYS be one column. Case closed. That being said, tab functionality is quite nice, so I&amp;rsquo;ve turned indent-tabs-mode to nil. Simply&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lisp" data-lang="lisp">(&lt;span style="color:#b8860b">setq-default&lt;/span> &lt;span style="color:#b8860b">indent-tabs-mode&lt;/span> &lt;span style="color:#800">nil&lt;/span>)
(&lt;span style="color:#b8860b">setq-default&lt;/span> &lt;span style="color:#b8860b">tab-width&lt;/span> &lt;span style="color:#666">2&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The next is an acquired taste: whitespace-mode. Ever since I properly configured my whitespace (invisibles) to be tastefully visible, I&amp;rsquo;ve grown to appreciate the subtly clean code. Trailing whitespace / unnecessary new lines have since disappeared.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lisp" data-lang="lisp">&lt;span style="color:#080;font-style:italic">;; Whitespace&lt;/span>
(&lt;span style="color:#00a000">use-package&lt;/span> &lt;span style="color:#b8860b">whitespace&lt;/span>
&lt;span style="color:#b8860b">:bind&lt;/span> ((&lt;span style="color:#b44">&amp;#34;C-c C-w&amp;#34;&lt;/span> &lt;span style="color:#666">.&lt;/span> &lt;span style="color:#b8860b">whitespace-mode&lt;/span>))
&lt;span style="color:#b8860b">:init&lt;/span>
(&lt;span style="color:#a2f">dolist&lt;/span> (&lt;span style="color:#b8860b">hook&lt;/span> &lt;span style="color:#666">&amp;#39;&lt;/span>(&lt;span style="color:#b8860b">prog-mode-hook&lt;/span> &lt;span style="color:#b8860b">text-mode-hook&lt;/span> &lt;span style="color:#b8860b">conf-mode-hook&lt;/span>))
(&lt;span style="color:#b8860b">add-hook&lt;/span> &lt;span style="color:#b8860b">hook&lt;/span> &lt;span style="color:#00a000">#&amp;#39;&lt;/span>&lt;span style="color:#b8860b">whitespace-mode&lt;/span>))
&lt;span style="color:#b8860b">:config&lt;/span>
(&lt;span style="color:#b8860b">add-hook&lt;/span> &lt;span style="color:#b8860b">&amp;#39;prog-mode-hook&lt;/span> &lt;span style="color:#b8860b">&amp;#39;whitespace-mode&lt;/span>)
(&lt;span style="color:#b8860b">global-whitespace-mode&lt;/span> &lt;span style="color:#800">t&lt;/span>) &lt;span style="color:#080;font-style:italic">;; Whitespace ON.&lt;/span>
(&lt;span style="color:#a2f;font-weight:bold">setq&lt;/span> &lt;span style="color:#b8860b">whitespace-global-modes&lt;/span> &lt;span style="color:#666">&amp;#39;&lt;/span>(&lt;span style="color:#00a000">not&lt;/span> &lt;span style="color:#b8860b">org-mode&lt;/span>))
(&lt;span style="color:#a2f;font-weight:bold">setq&lt;/span> &lt;span style="color:#b8860b">whitespace-line-column&lt;/span> &lt;span style="color:#666">80&lt;/span>) &lt;span style="color:#080;font-style:italic">;; Set indent limit.&lt;/span>
(&lt;span style="color:#a2f;font-weight:bold">setq&lt;/span> &lt;span style="color:#b8860b">whitespace-display-mappings&lt;/span>
&lt;span style="color:#666">&amp;#39;&lt;/span>(
(&lt;span style="color:#b8860b">space-mark&lt;/span> &lt;span style="color:#666">32&lt;/span> &lt;span style="color:#b8860b">[183]&lt;/span> &lt;span style="color:#b8860b">[46]&lt;/span>)
(&lt;span style="color:#b8860b">newline-mark&lt;/span> &lt;span style="color:#666">10&lt;/span> &lt;span style="color:#b8860b">[172&lt;/span> &lt;span style="color:#b8860b">10]&lt;/span>)
(&lt;span style="color:#b8860b">tab-mark&lt;/span> &lt;span style="color:#666">9&lt;/span> &lt;span style="color:#b8860b">[9655&lt;/span> &lt;span style="color:#b8860b">9]&lt;/span> &lt;span style="color:#b8860b">[92&lt;/span> &lt;span style="color:#b8860b">9]&lt;/span>))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, I&amp;rsquo;ve remapped the display for the space, newline, and tab to suit my taste. Whitespace is shown on pretty much every mode except org (where it really is never needed). Other than that, lines over 80 columns are highlighted. Simple and lovely.&lt;/p>
&lt;h3 id="helm">helm &lt;a href="#helm" class="hash">#&lt;/a>&lt;/h3>
&lt;p>Helm is a package that I never knew I needed, until I started using it. It&amp;rsquo;s described as an incremental completion and selection narrowing framework. Essentially, it gives me proper control over buffers, files, and commands similar to Smex (with a Neotree feel). Helm, however, is capably of out of order regex matching which is surprisingly uncommon.&lt;/p>
&lt;p>Here, I&amp;rsquo;ve remapped the helm key bindings to reflect standard C-x C-f / tab-complete functionality.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lisp" data-lang="lisp">&lt;span style="color:#080;font-style:italic">;; Helm&lt;/span>
(&lt;span style="color:#00a000">use-package&lt;/span> &lt;span style="color:#b8860b">helm&lt;/span>
&lt;span style="color:#b8860b">:ensure&lt;/span> &lt;span style="color:#800">t&lt;/span>
&lt;span style="color:#b8860b">:bind&lt;/span>
((&lt;span style="color:#b44">&amp;#34;M-x&amp;#34;&lt;/span> &lt;span style="color:#666">.&lt;/span> &lt;span style="color:#b8860b">helm-M-x&lt;/span>)
(&lt;span style="color:#b44">&amp;#34;C-x C-f&amp;#34;&lt;/span> &lt;span style="color:#666">.&lt;/span> &lt;span style="color:#b8860b">helm-find-files&lt;/span>))
&lt;span style="color:#b8860b">:config&lt;/span>
(&lt;span style="color:#a2f;font-weight:bold">setq&lt;/span> &lt;span style="color:#b8860b">helm-split-window-in-side-p&lt;/span> &lt;span style="color:#800">t&lt;/span> &lt;span style="color:#080;font-style:italic">;; opens helm inside window&lt;/span>
&lt;span style="color:#b8860b">helm-move-to-line-cycle-in-source&lt;/span> &lt;span style="color:#800">t&lt;/span>
&lt;span style="color:#b8860b">helm-autoresize-min-height&lt;/span> &lt;span style="color:#666">20&lt;/span>
&lt;span style="color:#b8860b">helm-autoresize-max-height&lt;/span> &lt;span style="color:#666">40&lt;/span>
&lt;span style="color:#b8860b">helm-scroll-amount&lt;/span> &lt;span style="color:#666">8&lt;/span>)
(&lt;span style="color:#b8860b">define-key&lt;/span> &lt;span style="color:#b8860b">helm-map&lt;/span> (&lt;span style="color:#b8860b">kbd&lt;/span> &lt;span style="color:#b44">&amp;#34;&amp;lt;tab&amp;gt;&amp;#34;&lt;/span>) &lt;span style="color:#b8860b">&amp;#39;helm-execute-persistent-action&lt;/span>)
(&lt;span style="color:#b8860b">define-key&lt;/span> &lt;span style="color:#b8860b">helm-map&lt;/span> (&lt;span style="color:#b8860b">kbd&lt;/span> &lt;span style="color:#b44">&amp;#34;C-z&amp;#34;&lt;/span>) &lt;span style="color:#b8860b">&amp;#39;helm-select-action&lt;/span>)
(&lt;span style="color:#a2f;font-weight:bold">setq&lt;/span> &lt;span style="color:#b8860b">helm-mode-fuzzy-match&lt;/span> &lt;span style="color:#800">t&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="org">org &lt;a href="#org" class="hash">#&lt;/a>&lt;/h3>
&lt;p>Org-mode might be one of the most expansive and powerful features of emacs. It is perfect for daily organization, notes, etc. Recently, I&amp;rsquo;ve adopted the org-clock, which can time tasks and generate useful reports. I may not be a freelancer who charges by the hour, but it certainly keeps me on track and focused.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lisp" data-lang="lisp">&lt;span style="color:#080;font-style:italic">;; Org&lt;/span>
(&lt;span style="color:#00a000">use-package&lt;/span> &lt;span style="color:#b8860b">org&lt;/span>
&lt;span style="color:#b8860b">:ensure&lt;/span> &lt;span style="color:#800">t&lt;/span>
&lt;span style="color:#b8860b">:mode&lt;/span> ((&lt;span style="color:#b44">&amp;#34;\\.org$&amp;#34;&lt;/span> &lt;span style="color:#666">.&lt;/span> &lt;span style="color:#b8860b">org-mode&lt;/span>))
&lt;span style="color:#b8860b">:bind&lt;/span> ((&lt;span style="color:#b44">&amp;#34;C-c C-x C-i&amp;#34;&lt;/span> &lt;span style="color:#666">.&lt;/span> &lt;span style="color:#b8860b">org-clock-in&lt;/span>)
(&lt;span style="color:#b44">&amp;#34;C-c C-x C-o&amp;#34;&lt;/span> &lt;span style="color:#666">.&lt;/span> &lt;span style="color:#b8860b">org-clock-out&lt;/span>)
(&lt;span style="color:#b44">&amp;#34;C-c C-x C-j&amp;#34;&lt;/span> &lt;span style="color:#666">.&lt;/span> &lt;span style="color:#b8860b">org-clock-goto&lt;/span>)
(&lt;span style="color:#b44">&amp;#34;C-c C-x C-r&amp;#34;&lt;/span> &lt;span style="color:#666">.&lt;/span> &lt;span style="color:#b8860b">org-clock-report&lt;/span>))
&lt;span style="color:#b8860b">:config&lt;/span>
(&lt;span style="color:#a2f;font-weight:bold">progn&lt;/span>
(&lt;span style="color:#b8860b">define-key&lt;/span> &lt;span style="color:#b8860b">org-mode-map&lt;/span> &lt;span style="color:#b44">&amp;#34;\M-q&amp;#34;&lt;/span> &lt;span style="color:#b8860b">&amp;#39;toggle-truncate-lines&lt;/span>)
(&lt;span style="color:#a2f;font-weight:bold">setq&lt;/span> &lt;span style="color:#b8860b">org-directory&lt;/span> &lt;span style="color:#b44">&amp;#34;~/org&amp;#34;&lt;/span>)
(&lt;span style="color:#a2f;font-weight:bold">setq&lt;/span> &lt;span style="color:#b8860b">org-clock-persist&lt;/span> &lt;span style="color:#800">t&lt;/span>)
(&lt;span style="color:#a2f;font-weight:bold">setq&lt;/span> &lt;span style="color:#b8860b">org-clock-mode-line-total&lt;/span> &lt;span style="color:#b8860b">&amp;#39;current&lt;/span>)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>While these snippets are not my configuration in it&amp;rsquo;s entirety, the full file is not a hulking mass. It can be found at in my &lt;a href="https://github.com/WalkerGriggs/DotFiles/blob/master/.emacs">dotfiles repo&lt;/a>. Feel free to take and modify what you need. If you have anything to contribute, feel free to shoot me an email!&lt;/p></description><author>walker@walkergriggs.com (Walker Griggs)</author><guid>/2017/01/14/a-year-with-emacs/</guid><pubDate>Wed, 14 Oct 2017 08:00:00 ES</pubDate></item></channel></rss>